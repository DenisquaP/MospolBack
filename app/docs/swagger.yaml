basePath: /
definitions:
  entity.ApproveRequest:
    properties:
      approve:
        type: boolean
      article_id:
        type: integer
    type: object
  entity.AuthRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  entity.AuthResponse:
    properties:
      is_moderator:
        type: boolean
      user:
        type: string
    type: object
  entity.CreateAtricleRequest:
    properties:
      author:
        type: integer
      content:
        type: string
      title:
        type: string
    type: object
  entity.CreateAuthorRequest:
    properties:
      author_name:
        type: string
      email:
        type: string
      is_moderator:
        type: boolean
      password:
        type: string
    type: object
  entity.CreateCommentRequest:
    properties:
      article_id:
        type: integer
      comment:
        type: string
      commentator_id:
        type: integer
    type: object
  entity.GetArticlesResponse:
    properties:
      articles:
        items:
          $ref: '#/definitions/entity.GetAtricleResponse'
        type: array
      last_page:
        type: integer
    type: object
  entity.GetAtricleResponse:
    properties:
      author:
        type: string
      content:
        type: string
      title:
        type: string
    type: object
  entity.OkResponse:
    properties:
      message:
        type: string
    type: object
  postgres.Article:
    properties:
      author:
        type: string
      content:
        type: string
      title:
        type: string
    type: object
  postgres.ArticleStr:
    properties:
      article:
        $ref: '#/definitions/postgres.Article'
      comments:
        items:
          $ref: '#/definitions/postgres.Comment'
        type: array
    type: object
  postgres.Comment:
    properties:
      comment:
        type: string
      commentator:
        type: string
    type: object
  postgres.UnapprovedComment:
    properties:
      comment:
        type: string
      comment_id:
        type: string
      commentator:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A service to create, read and comment articles
  title: articles_api
  version: "1.0"
paths:
  /all_comments:
    get:
      description: Gets all comments
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/postgres.UnapprovedComment'
            type: array
      summary: Returns all unapproved comments
  /approve_comment:
    patch:
      description: Updates an entry in db
      parameters:
      - description: Approve
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/entity.ApproveRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.OkResponse'
      summary: To accept or delete comment
  /auth:
    post:
      description: Creates an entry in cookie
      parameters:
      - description: Auth
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/entity.AuthRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.AuthResponse'
      summary: To auth user
  /get_article:
    get:
      description: Gets an entry from db by article_id
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postgres.ArticleStr'
      summary: To get all articles from db
  /get_articles:
    get:
      description: Gets an entry from db by article_id
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetArticlesResponse'
      summary: To get all articles from db
  /logout:
    post:
      description: Deletes an cookie entry
      responses:
        "200":
          description: OK
      summary: To logout
  /new_article:
    post:
      description: Creates an entry in db
      parameters:
      - description: CreateArticle
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/entity.CreateAtricleRequest'
      responses:
        "201":
          description: Created
      summary: To create an article
  /new_comment:
    post:
      description: Creates an entry in db
      parameters:
      - description: CreateComment
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/entity.CreateCommentRequest'
      responses:
        "201":
          description: Created
      summary: To create a comment to an article
  /register:
    post:
      description: Creates an entry in db
      parameters:
      - description: CreateArticle
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/entity.CreateAuthorRequest'
      responses:
        "200":
          description: OK
      summary: To register an user
swagger: "2.0"
